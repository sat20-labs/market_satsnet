---
description:
globs:
alwaysApply: false
---
# React DDD + Zustand + React Query 整合实践

## 架构分层与职责
- **UI层**：仅负责渲染和事件处理，直接访问本地UI状态。
- **应用层服务**：通过 React Query hooks 处理 API 交互，协调调用 Zustand 操作。
- **领域层（Zustand store）**：管理业务规则和领域状态。
- **基础设施层**：实现 API 通信。

> 推荐目录结构：
> - `infrastructure/api/`：API 适配器
> - `domain/`：领域模型与业务规则
> - `application/`：服务 hooks（集成 React Query + Zustand）
> - `stores/`：Zustand 状态管理
> - `components/`：UI 组件

## 状态管理与同步
- **React Query**：负责异步数据获取、缓存、重试、同步。
- **Zustand**：负责客户端领域状态管理和同步逻辑。
- **集成模式**：
  - useQuery 成功后，将 DTO 转为领域模型并写入 Zustand。
  - useMutation 成功后，更新 Zustand 并触发相关查询失效。
  - 组件优先从 Zustand 读取领域状态，必要时 fallback 到 React Query 缓存。

## 状态同步工作流
```mermaid
sequenceDiagram
    participant UI as UI组件
    participant RQ as React Query
    participant ZS as Zustand
    participant API as 后端API
    UI->>RQ: useQuery 获取数据
    RQ->>API: 发送请求
    API-->>RQ: 返回DTO
    RQ->>ZS: DTO转领域模型并写入
    ZS-->>UI: 通知状态变更
```

## Zustand Store 设计要点
- 领域对象数组、当前对象、加载/错误状态
- 提供 add/update/remove/set/get 方法
- 支持细粒度订阅与批量更新

## UI集成建议
- 服务层 hooks（useUserService）统一暴露数据、加载、更新方法
- 组件只订阅所需状态，避免无关重渲染
- 错误边界包裹关键组件

## 查询与缓存优化
- Zustand 作为初始数据源，React Query 负责异步刷新
- 配置 cacheTime/staleTime/refetch 策略
- onSuccess 自动同步 Zustand 状态
- 支持请求取消、批量更新、后台刷新

## 事务与回滚
- 领域操作先本地变更，API 成功后持久化
- onError 回滚本地状态，保证一致性

## 测试与开发体验
- 领域模型单元测试
- 服务层集成测试（mock API + 状态验证）
- E2E 流程测试（UI+状态+API）
- 推荐集成 React Query Devtools、Zustand Devtools

## 最佳实践总结
- 分层职责清晰，数据流：API→DTO→领域模型→Zustand→UI
- React Query 处理异步/缓存，Zustand 管理领域状态，DDD 明确业务边界
- 适合复杂、数据密集型前端应用

